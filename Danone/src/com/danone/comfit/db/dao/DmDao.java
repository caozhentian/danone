package com.danone.comfit.db.dao;

import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;

import com.danone.comfit.common.bean.Dm;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "dm".
*/
public class DmDao extends AbstractDao<Dm, String> {

    public static final String TABLENAME = "dm";

    /**
     * Properties of entity Dm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AppId = new Property(0, String.class, "appId", true, "APP_ID");
        public final static Property Brthdat = new Property(1, java.util.Date.class, "brthdat", false, "BRTHDAT");
        public final static Property DiaryregId = new Property(2, String.class, "diaryregId", false, "diaryreg_id");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
    };


    public DmDao(DaoConfig config) {
        super(config);
    }
    
    public DmDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"dm\" (" + //
                "\"APP_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: appId
                "\"BRTHDAT\" INTEGER," + // 1: brthdat
                "\"diaryreg_id\" TEXT," + // 2: diaryregId
                "\"SEX\" TEXT);"); // 3: sex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"dm\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Dm entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAppId());
 
        java.util.Date brthdat = entity.getBrthdat();
        if (brthdat != null) {
            stmt.bindLong(2, brthdat.getTime());
        }
 
        String diaryregId = entity.getDiaryregId();
        if (diaryregId != null) {
            stmt.bindString(3, diaryregId);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Dm readEntity(Cursor cursor, int offset) {
        Dm entity = new Dm( //
            cursor.getString(offset + 0), // appId
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // brthdat
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // diaryregId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // sex
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Dm entity, int offset) {
        entity.setAppId(cursor.getString(offset + 0));
        entity.setBrthdat(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDiaryregId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Dm entity, long rowId) {
        return entity.getAppId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Dm entity) {
        if(entity != null) {
            return entity.getAppId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
