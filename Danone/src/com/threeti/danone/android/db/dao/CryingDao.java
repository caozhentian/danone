package com.threeti.danone.android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.threeti.danone.common.bean.Crying;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Crying".
*/
public class CryingDao extends AbstractDao<Crying, Void> {

    public static final String TABLENAME = "Crying";

    /**
     * Properties of entity Crying.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property App_id = new Property(1, String.class, "app_id", false, "APP_ID");
        public final static Property Infant_id = new Property(2, String.class, "infant_id", false, "INFANT_ID");
        public final static Property Crytype = new Property(3, String.class, "crytype", false, "CRYTYPE");
        public final static Property Modify_reason = new Property(4, String.class, "modify_reason", false, "MODIFY_REASON");
        public final static Property Delete_reason = new Property(5, String.class, "delete_reason", false, "DELETE_REASON");
        public final static Property Time_of_day = new Property(6, String.class, "time_of_day", false, "TIME_OF_DAY");
        public final static Property Cryinyn = new Property(7, String.class, "cryinyn", false, "CRYINYN");
        public final static Property Ddat = new Property(8, long.class, "ddat", false, "DDAT");
        public final static Property Crysttim = new Property(9, long.class, "crysttim", false, "CRYSTTIM");
        public final static Property Cryentim = new Property(10, long.class, "cryentim", false, "CRYENTIM");
        public final static Property Delete_status = new Property(11, Integer.class, "delete_status", false, "DELETE_STATUS");
    };


    public CryingDao(DaoConfig config) {
        super(config);
    }
    
    public CryingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Crying\" (" + //
                "\"ID\" TEXT NOT NULL ," + // 0: id
                "\"APP_ID\" TEXT NOT NULL ," + // 1: app_id
                "\"INFANT_ID\" TEXT," + // 2: infant_id
                "\"CRYTYPE\" TEXT NOT NULL ," + // 3: crytype
                "\"MODIFY_REASON\" TEXT," + // 4: modify_reason
                "\"DELETE_REASON\" TEXT," + // 5: delete_reason
                "\"TIME_OF_DAY\" TEXT," + // 6: time_of_day
                "\"CRYINYN\" TEXT," + // 7: cryinyn
                "\"DDAT\" INTEGER NOT NULL ," + // 8: ddat
                "\"CRYSTTIM\" INTEGER NOT NULL ," + // 9: crysttim
                "\"CRYENTIM\" INTEGER NOT NULL ," + // 10: cryentim
                "\"DELETE_STATUS\" INTEGER);"); // 11: delete_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Crying\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Crying entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getApp_id());
 
        String infant_id = entity.getInfant_id();
        if (infant_id != null) {
            stmt.bindString(3, infant_id);
        }
        stmt.bindString(4, entity.getCrytype());
 
        String modify_reason = entity.getModify_reason();
        if (modify_reason != null) {
            stmt.bindString(5, modify_reason);
        }
 
        String delete_reason = entity.getDelete_reason();
        if (delete_reason != null) {
            stmt.bindString(6, delete_reason);
        }
 
        String time_of_day = entity.getTime_of_day();
        if (time_of_day != null) {
            stmt.bindString(7, time_of_day);
        }
 
        String cryinyn = entity.getCryinyn();
        if (cryinyn != null) {
            stmt.bindString(8, cryinyn);
        }
        stmt.bindLong(9, entity.getDdat());
        stmt.bindLong(10, entity.getCrysttim());
        stmt.bindLong(11, entity.getCryentim());
 
        Integer delete_status = entity.getDelete_status();
        if (delete_status != null) {
            stmt.bindLong(12, delete_status);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Crying readEntity(Cursor cursor, int offset) {
        Crying entity = new Crying( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // app_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // infant_id
            cursor.getString(offset + 3), // crytype
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // modify_reason
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // delete_reason
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time_of_day
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cryinyn
            cursor.getLong(offset + 8), // ddat
            cursor.getLong(offset + 9), // crysttim
            cursor.getLong(offset + 10), // cryentim
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // delete_status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Crying entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setApp_id(cursor.getString(offset + 1));
        entity.setInfant_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCrytype(cursor.getString(offset + 3));
        entity.setModify_reason(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDelete_reason(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime_of_day(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCryinyn(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDdat(cursor.getLong(offset + 8));
        entity.setCrysttim(cursor.getLong(offset + 9));
        entity.setCryentim(cursor.getLong(offset + 10));
        entity.setDelete_status(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Crying entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Crying entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
