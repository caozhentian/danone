package com.threeti.danone.android.db.dao;

import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;

import com.threeti.danone.common.bean.Feed;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "feed".
*/
public class FeedDao extends AbstractDao<Feed, String> {

    public static final String TABLENAME = "feed";

    /**
     * Properties of entity Feed.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AppId = new Property(0, String.class, "appId", true, "APP_ID");
        public final static Property ServerId = new Property(1, String.class, "serverId", false, "server_Id");
        public final static Property ModifyReason = new Property(2, String.class, "modifyReason", false, "modify_reason");
        public final static Property DeleteReason = new Property(3, String.class, "deleteReason", false, "delete_reason");
        public final static Property InfantId = new Property(4, String.class, "infantId", false, "infant_id");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property Ddat = new Property(6, java.util.Date.class, "ddat", false, "DDAT");
        public final static Property TimeOfDay = new Property(7, String.class, "timeOfDay", false, "time_of_day");
        public final static Property FeedScoop = new Property(8, Integer.class, "feedScoop", false, "feed_scoop");
        public final static Property FeedPrep = new Property(9, Integer.class, "feedPrep", false, "feed_prep");
        public final static Property FeedLeft = new Property(10, Integer.class, "feedLeft", false, "feed_left");
        public final static Property Feedcon = new Property(11, Integer.class, "feedcon", false, "feed_Con");
    };


    public FeedDao(DaoConfig config) {
        super(config);
    }
    
    public FeedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"feed\" (" + //
                "\"APP_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: appId
                "\"server_Id\" TEXT," + // 1: serverId
                "\"modify_reason\" TEXT," + // 2: modifyReason
                "\"delete_reason\" TEXT," + // 3: deleteReason
                "\"infant_id\" TEXT NOT NULL ," + // 4: infantId
                "\"STATUS\" INTEGER," + // 5: status
                "\"DDAT\" INTEGER NOT NULL ," + // 6: ddat
                "\"time_of_day\" TEXT," + // 7: timeOfDay
                "\"feed_scoop\" INTEGER," + // 8: feedScoop
                "\"feed_prep\" INTEGER," + // 9: feedPrep
                "\"feed_left\" INTEGER," + // 10: feedLeft
                "\"feed_Con\" INTEGER);"); // 11: feedcon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"feed\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Feed entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAppId());
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(2, serverId);
        }
 
        String modifyReason = entity.getModifyReason();
        if (modifyReason != null) {
            stmt.bindString(3, modifyReason);
        }
 
        String deleteReason = entity.getDeleteReason();
        if (deleteReason != null) {
            stmt.bindString(4, deleteReason);
        }
        stmt.bindString(5, entity.getInfantId());
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
        stmt.bindLong(7, entity.getDdat().getTime());
 
        String timeOfDay = entity.getTimeOfDay();
        if (timeOfDay != null) {
            stmt.bindString(8, timeOfDay);
        }
 
        Integer feedScoop = entity.getFeedScoop();
        if (feedScoop != null) {
            stmt.bindLong(9, feedScoop);
        }
 
        Integer feedPrep = entity.getFeedPrep();
        if (feedPrep != null) {
            stmt.bindLong(10, feedPrep);
        }
 
        Integer feedLeft = entity.getFeedLeft();
        if (feedLeft != null) {
            stmt.bindLong(11, feedLeft);
        }
 
        Integer feedcon = entity.getFeedcon();
        if (feedcon != null) {
            stmt.bindLong(12, feedcon);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Feed readEntity(Cursor cursor, int offset) {
        Feed entity = new Feed( //
            cursor.getString(offset + 0), // appId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serverId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // modifyReason
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deleteReason
            cursor.getString(offset + 4), // infantId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            new java.util.Date(cursor.getLong(offset + 6)), // ddat
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timeOfDay
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // feedScoop
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // feedPrep
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // feedLeft
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // feedcon
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Feed entity, int offset) {
        entity.setAppId(cursor.getString(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModifyReason(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeleteReason(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInfantId(cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDdat(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setTimeOfDay(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFeedScoop(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setFeedPrep(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setFeedLeft(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setFeedcon(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Feed entity, long rowId) {
        return entity.getAppId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Feed entity) {
        if(entity != null) {
            return entity.getAppId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
