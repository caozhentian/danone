package com.threeti.danone.android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.threeti.danone.common.bean.Spitting_up;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "spitting_up".
*/
public class Spitting_upDao extends AbstractDao<Spitting_up, Void> {

    public static final String TABLENAME = "spitting_up";

    /**
     * Properties of entity Spitting_up.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property App_id = new Property(1, String.class, "app_id", false, "APP_ID");
        public final static Property Modify_reason = new Property(2, String.class, "modify_reason", false, "MODIFY_REASON");
        public final static Property Delete_reason = new Property(3, String.class, "delete_reason", false, "DELETE_REASON");
        public final static Property Infant_id = new Property(4, String.class, "infant_id", false, "INFANT_ID");
        public final static Property Ddat = new Property(5, long.class, "ddat", false, "DDAT");
        public final static Property Type = new Property(6, Integer.class, "type", false, "TYPE");
        public final static Property Amount = new Property(7, Integer.class, "amount", false, "AMOUNT");
        public final static Property Delete_status = new Property(8, Integer.class, "delete_status", false, "DELETE_STATUS");
    };


    public Spitting_upDao(DaoConfig config) {
        super(config);
    }
    
    public Spitting_upDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"spitting_up\" (" + //
                "\"ID\" TEXT NOT NULL ," + // 0: id
                "\"APP_ID\" TEXT NOT NULL ," + // 1: app_id
                "\"MODIFY_REASON\" TEXT," + // 2: modify_reason
                "\"DELETE_REASON\" TEXT," + // 3: delete_reason
                "\"INFANT_ID\" TEXT," + // 4: infant_id
                "\"DDAT\" INTEGER NOT NULL ," + // 5: ddat
                "\"TYPE\" INTEGER," + // 6: type
                "\"AMOUNT\" INTEGER," + // 7: amount
                "\"DELETE_STATUS\" INTEGER);"); // 8: delete_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"spitting_up\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Spitting_up entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getApp_id());
 
        String modify_reason = entity.getModify_reason();
        if (modify_reason != null) {
            stmt.bindString(3, modify_reason);
        }
 
        String delete_reason = entity.getDelete_reason();
        if (delete_reason != null) {
            stmt.bindString(4, delete_reason);
        }
 
        String infant_id = entity.getInfant_id();
        if (infant_id != null) {
            stmt.bindString(5, infant_id);
        }
        stmt.bindLong(6, entity.getDdat());
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(7, type);
        }
 
        Integer amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(8, amount);
        }
 
        Integer delete_status = entity.getDelete_status();
        if (delete_status != null) {
            stmt.bindLong(9, delete_status);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Spitting_up readEntity(Cursor cursor, int offset) {
        Spitting_up entity = new Spitting_up( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // app_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // modify_reason
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // delete_reason
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // infant_id
            cursor.getLong(offset + 5), // ddat
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // amount
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // delete_status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Spitting_up entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setApp_id(cursor.getString(offset + 1));
        entity.setModify_reason(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDelete_reason(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInfant_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDdat(cursor.getLong(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAmount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDelete_status(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Spitting_up entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Spitting_up entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
