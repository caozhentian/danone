package com.threeti.danone.android.db.dao;

import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;

import com.threeti.danone.common.bean.TimeSpent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "timespent".
*/
public class TimeSpentDao extends AbstractDao<TimeSpent, String> {

    public static final String TABLENAME = "timespent";

    /**
     * Properties of entity TimeSpent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AppId = new Property(0, String.class, "appId", true, "APP_ID");
        public final static Property ServerId = new Property(1, String.class, "serverId", false, "server_Id");
        public final static Property ModifyReason = new Property(2, String.class, "modifyReason", false, "modify_reason");
        public final static Property DeleteReason = new Property(3, String.class, "deleteReason", false, "delete_reason");
        public final static Property InfantId = new Property(4, String.class, "infantId", false, "infant_id");
        public final static Property DiaryRegId = new Property(5, String.class, "diaryRegId", false, "diary_reg_id");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
        public final static Property Ddat = new Property(7, java.util.Date.class, "ddat", false, "DDAT");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Time = new Property(9, Integer.class, "time", false, "TIME");
    };


    public TimeSpentDao(DaoConfig config) {
        super(config);
    }
    
    public TimeSpentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"timespent\" (" + //
                "\"APP_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: appId
                "\"server_Id\" TEXT," + // 1: serverId
                "\"modify_reason\" TEXT," + // 2: modifyReason
                "\"delete_reason\" TEXT," + // 3: deleteReason
                "\"infant_id\" TEXT," + // 4: infantId
                "\"diary_reg_id\" TEXT," + // 5: diaryRegId
                "\"STATUS\" INTEGER," + // 6: status
                "\"DDAT\" INTEGER NOT NULL ," + // 7: ddat
                "\"TYPE\" TEXT," + // 8: type
                "\"TIME\" INTEGER);"); // 9: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"timespent\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, TimeSpent entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAppId());
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(2, serverId);
        }
 
        String modifyReason = entity.getModifyReason();
        if (modifyReason != null) {
            stmt.bindString(3, modifyReason);
        }
 
        String deleteReason = entity.getDeleteReason();
        if (deleteReason != null) {
            stmt.bindString(4, deleteReason);
        }
 
        String infantId = entity.getInfantId();
        if (infantId != null) {
            stmt.bindString(5, infantId);
        }
 
        String diaryRegId = entity.getDiaryRegId();
        if (diaryRegId != null) {
            stmt.bindString(6, diaryRegId);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
        stmt.bindLong(8, entity.getDdat().getTime());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        Integer time = entity.getTime();
        if (time != null) {
            stmt.bindLong(10, time);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TimeSpent readEntity(Cursor cursor, int offset) {
        TimeSpent entity = new TimeSpent( //
            cursor.getString(offset + 0), // appId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serverId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // modifyReason
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deleteReason
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // infantId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // diaryRegId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // status
            new java.util.Date(cursor.getLong(offset + 7)), // ddat
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TimeSpent entity, int offset) {
        entity.setAppId(cursor.getString(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModifyReason(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeleteReason(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInfantId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDiaryRegId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDdat(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTime(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TimeSpent entity, long rowId) {
        return entity.getAppId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TimeSpent entity) {
        if(entity != null) {
            return entity.getAppId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
