package com.threeti.danone.android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.threeti.danone.android.db.converter.ItenPropertyConverter;
import com.threeti.danone.common.bean.tc;

import java.lang.String;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tc".
*/
public class tcDao extends AbstractDao<tc, Long> {

    public static final String TABLENAME = "tc";

    /**
     * Properties of entity tc.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Age = new Property(2, int.class, "age", false, "AGE");
        public final static Property Score = new Property(3, double.class, "score", false, "SCORE");
        public final static Property Fancy = new Property(4, String.class, "fancy", false, "FANCY");
        public final static Property Time = new Property(5, Long.class, "time", false, "TIME");
    };

    private final ItenPropertyConverter timeConverter = new ItenPropertyConverter();

    public tcDao(DaoConfig config) {
        super(config);
    }
    
    public tcDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tc\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"AGE\" INTEGER NOT NULL ," + // 2: age
                "\"SCORE\" REAL NOT NULL ," + // 3: score
                "\"FANCY\" TEXT NOT NULL ," + // 4: fancy
                "\"TIME\" INTEGER);"); // 5: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tc\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, tc entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getAge());
        stmt.bindDouble(4, entity.getScore());
        stmt.bindString(5, entity.getFancy());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, timeConverter.convertToDatabaseValue(time));
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public tc readEntity(Cursor cursor, int offset) {
        tc entity = new tc( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // age
            cursor.getDouble(offset + 3), // score
            cursor.getString(offset + 4), // fancy
            cursor.isNull(offset + 5) ? null : timeConverter.convertToEntityProperty(cursor.getLong(offset + 5)) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, tc entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAge(cursor.getInt(offset + 2));
        entity.setScore(cursor.getDouble(offset + 3));
        entity.setFancy(cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : timeConverter.convertToEntityProperty(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(tc entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(tc entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
